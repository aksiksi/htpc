# Run:
#   sudo pip install docker-compose
#   docker-compose up -d
version: "3.7"
services:
  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TIMEZONE}
    volumes:
      - sonarr:/config
      - share1:/data
      - downloads:/downloads
    ports:
      - "8989:8989"
    depends_on:
      - nzbget
      - transmission
    restart: unless-stopped
  radarr:
    image: linuxserver/radarr
    container_name: radarr
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TIMEZONE}
    volumes:
      - radarr:/config
      - share1:/data
      - downloads:/downloads
    ports:
      - "7878:7878"
    depends_on:
      - nzbget
      - transmission
    restart: unless-stopped
  nzbget:
    image: linuxserver/nzbget
    container_name: nzbget
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TIMEZONE}
    volumes:
      - nzbget:/config
      - downloads:/downloads
      - intermediate:/intermediate
    ports:
      - "6789:6789"
    restart: unless-stopped
  # Uncomment this section for Transmssion *without* VPN
  # transmission:
  #   image: linuxserver/transmission
  #   container_name: transmission
  #   environment:
  #     PUID: ${PUID}
  #     PGID: ${PGID}
  #     TZ: ${TIMEZONE}
  #   volumes:
  #     - transmission:/config
  #     - downloads:/downloads
  #   ports:
  #   ports:
  #     - "9091:9091"
  #     - "51413:51413"
  #     - "51413:51413/udp"
  #   restart: unless-stopped
  transmission:
    container_name: transmission
    image: haugene/transmission-openvpn:latest-armhf
    cap_add:
      - NET_ADMIN
    devices:
      - "/dev/net/tun"
    restart: unless-stopped
    ports:
      - "9091:9091"
      - "8888:8888"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    sysctls:
      net.ipv6.conf.all.disable_ipv6: 0
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - transmission:/config
      - downloads:/downloads
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      OPENVPN_OPTS: --inactive 3600 --ping 10 --ping-exit 60
      LOCAL_NETWORK: 192.168.0.0/24
      TRANSMISSION_WEB_UI: transmission-web-control
      OPENVPN_PROVIDER: ${OPENVPN_PROVIDER}
      OPENVPN_CONFIG: ${OPENVPN_CONFIG}
      OPENVPN_USERNAME: ${OPENVPN_USERNAME}
      OPENVPN_PASSWORD: ${OPENVPN_PASSWORD}
  emby:
    container_name: emby
    image: emby/embyserver_arm32v7:latest
    ports:
      - "8096:8096"
      - "8920:8920"
    environment:
      UID: ${PUID}
      GID: ${PGID}
      TZ: ${TIMEZONE}
    volumes:
      - emby:/config
      - share1:/share1
    restart: unless-stopped
  jackett:
    image: linuxserver/jackett
    container_name: jackett
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TIMEZONE}
    volumes:
      - jackett:/config
      - downloads:/downloads
    ports:
    ports:
      - "9117:9117"
    restart: unless-stopped
  portainer:
    image: portainer/portainer
    command: -H unix:///var/run/docker.sock
    restart: always
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
  # OPTIONAL: Nginx + LetsEncrypt for HTTPS reverse proxy
  # This can be used with e.g. Emby
  # letsencrypt:
  #   image: linuxserver/letsencrypt
  #   container_name: letsencrypt
  #   cap_add:
  #     - NET_ADMIN
  #   environment:
  #     PUID: ${PUID}
  #     PGID: ${PGID}
  #     TZ: ${TIMEZONE}
  #     URL: ${LETSENCRYPT_URL}
  #     # SUBDOMAINS: ${LETSENCRYPT_SUBDOMAINS}
  #     VALIDATION: http
  #   volumes:
  #     - /etc/rpi-htpc/letsencrypt:/config
  #   ports:
  #     - "443:443"
  #     - "80:80"
  #   restart: unless-stopped

volumes:
  # Named config containers
  sonarr:
    name: sonarr
    external: true
  radarr:
    name: radarr
    external: true
  nzbget:
    name: nzbget
    external: true
  transmission:
    name: transmission
    external: true
  jackett:
    name: jackett
    external: true
  emby:
    name: emby
    driver_opts:
      type: none
      device: ${SHARE_PATH}/.emby
      o: bind
  portainer_data:

  # Volumes shared across containers
  # Add more share paths as needed
  downloads:
    name: downloads
    driver_opts:
      type: none
      device: ${DOWNLOADS_PATH}
      o: bind
  intermediate:
    name: intermediate
    driver_opts:
      type: none
      device: ${DOWNLOADS_PATH}/intermediate
      o: bind
  share1:
    name: share1
    driver_opts:
      type: none
      device: ${SHARE_PATH}
      o: bind
