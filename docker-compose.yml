# Steps:
#   1. Replace all "/data" volumes with paths to your external HDD mount.
#   2. Enjoy!
# Notes:
#   - We use a single Docker volume for Sonarr/Radarr as recommended by the team.
#     In our case, we set it to the _root_ of the external drive.
#
# Run:
#   sudo pip install docker-compose
#   docker-compose up -d
version: "3.7"
services:
  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    environment:
      PUID: 1000
      PGID: 1000
      TZ: America/New_York
    volumes:
      - sonarr:/config
      - share1:/data
    ports:
      - "8989:8989"
    depends_on:
      - nzbget
      - transmission
    restart: unless-stopped
  radarr:
    image: linuxserver/radarr
    container_name: radarr
    environment:
      PUID: 1000
      PGID: 1000
      TZ: America/New_York
    volumes:
      - radarr:/config
      - share1:/data
    ports:
      - "7878:7878"
    depends_on:
      - nzbget
      - transmission
    restart: unless-stopped
  nzbget:
    image: linuxserver/nzbget
    container_name: nzbget
    environment:
      PUID: 1000
      PGID: 1000
      TZ: America/New_York
    volumes:
      - nzbget:/config
      - downloads:/downloads
      - intermediate:/intermediate
    ports:
      - "6789:6789"
    restart: unless-stopped
  # Uncomment this for Transmssion *without* VPN
  # transmission:
  #   image: linuxserver/transmission
  #   container_name: transmission
  #   environment:
  #     PUID: 1000
  #     PGID: 1000
  #     TZ: America/New_York
  #   volumes:
  #     - transmission:/config
  #     - downloads:/downloads
  #   ports:
  #   ports:
  #     - "9091:9091"
  #     - "51413:51413"
  #     - "51413:51413/udp"
  #   restart: unless-stopped
  transmission:
    # NOTE: Make sure to change your provider info below
    container_name: transmission
    image: haugene/transmission-openvpn:latest-armhf
    cap_add:
      - NET_ADMIN
    devices:
      - "/dev/net/tun"
    restart: unless-stopped
    ports:
      - "9091:9091"
      - "8888:8888"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    sysctls:
      net.ipv6.conf.all.disable_ipv6: 0
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - transmission:/config
      - downloads:/data
    environment:
      PUID: 1000
      PGID: 1000
      OPENVPN_OPTS: --inactive 3600 --ping 10 --ping-exit 60
      LOCAL_NETWORK: 192.168.0.0/24
      TRANSMISSION_WEB_UI: transmission-web-control

      # Provider list: http://haugene.github.io/docker-transmission-openvpn/supported-providers/
      OPENVPN_PROVIDER: YOUR_PROVIDER

      # Find config here: https://github.com/haugene/docker-transmission-openvpn/tree/master/openvpn
      OPENVPN_CONFIG: PROVIDER_CONFIG
      OPENVPN_USERNAME: USERNAME
      OPENVPN_PASSWORD: PASSWORD
  emby:
    container_name: emby
    image: emby/embyserver_arm32v7:latest
    ports:
      - "8096:8096"
      - "8920:8920"
    environment:
      TZ: America/New_York
      UID: 1000
      GID: 1000
    volumes:
      - emby:/config
      - share1:/share1
      - share2:/share2
    restart: unless-stopped
  jackett:
    image: linuxserver/jackett
    container_name: jackett
    environment:
      PUID: 1000
      PGID: 1000
      TZ: America/New_York
    volumes:
      - jackett:/config
      - downloads:/downloads
    ports:
    ports:
      - "9117:9117"
    restart: unless-stopped
  portainer:
    image: portainer/portainer
    command: -H unix:///var/run/docker.sock
    restart: always
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

volumes:
  # Named config containers
  sonarr:
    name: sonarr
    external: true
  radarr:
    name: radarr
    external: true
  nzbget:
    name: nzbget
    external: true
  transmission:
    name: transmission
    external: true
  jackett:
    name: jackett
    external: true
  emby:
    name: emby
    driver_opts:
      type: none
      device: /mnt/share1/.emby
      o: bind
  portainer_data:

  # Volumes shared across containers
  downloads:
    name: downloads
    driver_opts:
      type: none
      device: /mnt/share1/Downloads
      o: bind
  intermediate:
    name: intermediate
    driver_opts:
      type: none
      device: /mnt/share1/Downloads/intermediate
      o: bind
  share1:
    name: share1
    driver_opts:
      type: none
      device: /mnt/share1/
      o: bind
  share2:
    name: share2
    driver_opts:
      type: none
      device: /mnt/share2/
      o: bind
